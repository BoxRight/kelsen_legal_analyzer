# -*- coding: utf-8 -*-
"""contracttester.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EG7wDgelHQnYfnHk1Bvd4qQ0WrRGMe1a
"""

import json

# Load the JSON file and convert it to a dictionary
def load_json_to_dict(json_file_path):
    with open(json_file_path, 'r') as file:
        data_dict = json.load(file)
    return data_dict

# Write the generated contract to a text file
def write_contract_to_file(contract_text, output_file_path):
    with open(output_file_path, 'w', encoding='utf-8') as file:
        file.write(contract_text)


# Example usage:
json_file_path = './ast_output.json'
output_file_path = './generated_contract.txt'
data_dict = load_json_to_dict(json_file_path)

def generate_parties_section(contract_data):
    # Extract parties information
    parties = {}
    node = contract_data

    while node:
        if node.get("NodeType") == "AST_DECLARATION":
            identifier_obj = node.get("Identifier")
            expression = node.get("Expression")

            if identifier_obj and expression:
                identifier = identifier_obj.get("Identifier")
                if identifier and node.get("Type", {}).get("Type") == "subject":
                    name = expression.get("Description1", {}).get("String", "").strip('"')
                    address = expression.get("Description2", {}).get("String", "").strip('"')
                    parties[identifier] = {"name": name, "address": address}

        node = node.get("Next")

    # Contract header for PARTES section
    contract_parties_section = "PARTES:\n\n"

    # Generate party sections dynamically
    for identifier, info in parties.items():
        contract_parties_section += f"{identifier.upper()}:\n\n"
        contract_parties_section += f"    Nombre: \"{info['name']}\"\n"
        contract_parties_section += f"    Dirección: \"{info['address']}\"\n"
        contract_parties_section += "    Para oír y recibir notificaciones\n\n"

    return contract_parties_section

def extract_descriptions(contract_data):
    descriptions = {}

    node = contract_data
    while node:
        node_type = node.get("NodeType")

        # Check if the node is an AST_DECLARATION and its IdentifierType is "TYPE_STRING"
        if node_type == "AST_DECLARATION" and node.get("Type", {}).get("Type") == "string":
            identifier_info = node.get("Identifier", {})
            identifier_type = identifier_info.get("IdentifierType")
            identifier = identifier_info.get("Identifier")
            expression = node.get("Expression", {})

            # Only process nodes where IdentifierType is "TYPE_STRING"
            if identifier_type == "TYPE_STRING" and identifier:
                description_value = expression.get("String", "").strip('"')
                descriptions[identifier] = description_value

        node = node.get("Next")

    return descriptions

def generate_object_section(contract_data):
    descriptions = extract_descriptions(contract_data)  # Extract the descriptions first
    services = []
    properties = []

    node = contract_data
    while node:
        node_type = node.get("NodeType")

        if node_type == "AST_DECLARATION" and node.get("Type", {}).get("Type") == "asset":
            identifier_obj = node.get("Identifier")
            expression = node.get("Expression")

            if identifier_obj and expression:
                identifier = identifier_obj.get("Identifier")
                type_of_asset = expression.get("Type", {}).get("Type")
                subject1 = expression.get("Subject1", {}).get("Identifier")
                description_key = expression.get("Description", {}).get("Identifier")  # Correct key
                subject2 = expression.get("Subject2", {}).get("Identifier")

                # Retrieve the correct description using the description_key
                description = descriptions.get(description_key, description_key)

                # Correctly format the output
                if type_of_asset == "Service":
                    if subject1 and subject2:
                        services.append(f"    El {subject1} {description} al {subject2}")
                    else:
                        print(f"Error: subject1 or subject2 not found. subject1: {subject1}, subject2: {subject2}")
                elif type_of_asset == "Property":
                    if subject1 and subject2:
                        properties.append(f"    El {subject1} {description} al {subject2}.")
                    else:
                        print(f"Error: subject1 or subject2 not found. subject1: {subject1}, subject2: {subject2}")

        node = node.get("Next")

    # Generate the OBJETO DEL CONTRATO section
    object_section = "OBJETO DEL CONTRATO:\n\n"

    if services:
        object_section += "    Conductas:\n"
        for service in services:
            object_section += f"{service}\n"

    if properties:
        object_section += "\n    Bienes:\n"
        for property in properties:
            object_section += f"{property}\n"

    return object_section

def handle_condition(condition, descriptions, assets):
    node_type = condition.get("NodeType")

    if node_type == "AST_AND":
        left_condition = handle_condition(condition.get("Left"), descriptions, assets)
        right_condition = handle_condition(condition.get("Right"), descriptions, assets)
        return f"{left_condition} y {right_condition}"

    elif node_type == "AST_CONDITION":
        left_condition = handle_condition(condition.get("Left"), descriptions, assets)
        return left_condition

    elif node_type == "AST_IDENTIFIER":
        identifier = condition.get("Identifier")
        asset_description = assets.get(identifier, identifier)
        return asset_description

    else:
        return "Unknown Condition"

def handle_consequence(consequence, descriptions, assets):
    node_type = consequence.get("NodeType")

    if node_type == "AST_CR" or node_type == "AST_OB":
        identifier = consequence.get("Left").get("Identifier")
        asset_description = assets.get(identifier, identifier)

        return f"se tiene derecho de exigir que {asset_description}"
    elif node_type == "AST_PVG":
        identifier = consequence.get("Left").get("Identifier")
        asset_description = assets.get(identifier, identifier)

        return f"se permite que {asset_description}"
    elif node_type == "AST_PR":
        identifier = consequence.get("Left").get("Identifier")
        asset_description = assets.get(identifier, identifier)
        return f"se prohibe que {asset_description}"
    else:
        print(f"Unknown consequence type: {node_type}")
        return "Unknown Consequence"


def extract_assets(contract_data):
    descriptions = extract_descriptions(contract_data)  # Extract the descriptions first

    assets = {}

    node = contract_data
    while node:
        node_type = node.get("NodeType")

        if node_type == "AST_DECLARATION" and node.get("Type", {}).get("Type") == "asset":
            identifier_obj = node.get("Identifier")
            expression = node.get("Expression")

            if identifier_obj and expression:
                identifier = identifier_obj.get("Identifier")
                type_of_asset = expression.get("Type", {}).get("Type")
                subject1 = expression.get("Subject1", {}).get("Identifier")
                description_key = expression.get("Description", {}).get("Identifier")
                subject2 = expression.get("Subject2", {}).get("Identifier")

                description = descriptions.get(description_key, description_key)

                if type_of_asset == "Service":
                    assets[identifier] = f"El {subject1} {description} al {subject2}"
                elif type_of_asset == "Property":
                    assets[identifier] = f"El {subject1} {description} al {subject2}"

        node = node.get("Next")

    return assets

def generate_clauses_section(contract_data):
    descriptions = extract_descriptions(contract_data)
    assets = extract_assets(contract_data)  # Extract the asset descriptions
    clauses = []

    node = contract_data
    clause_number = 1

    while node:
        node_type = node.get("NodeType")

        if node_type == "AST_DECLARATION" and node.get("Type", {}).get("Type") == "clause":
            expression = node.get("Expression")
            if expression:
                condition = expression.get("Condition")
                consequence = expression.get("Consequence")

                formatted_condition = handle_condition(condition, descriptions, assets)
                formatted_consequence = handle_consequence(consequence, descriptions, assets)

                clause = f"CLÁUSULA {clause_number}:\nEn caso de que {formatted_condition}, entonces {formatted_consequence}.\n"
                clauses.append(clause)
                clause_number += 1

        node = node.get("Next")

    clauses_section = "\nCLÁUSULAS:\n\n"
    for clause in clauses:
        clauses_section += f"{clause}\n"

    return clauses_section

def generate_contract(contract_data):
    # Generate each section
    parties_section = generate_parties_section(contract_data)
    object_section = generate_object_section(contract_data)
    clauses_section = generate_clauses_section(contract_data)

    # Combine all sections into the final contract
    contract = parties_section + "\n" + object_section + "\n" + clauses_section

    return contract

# Generate the contract
contract_text = generate_contract(data_dict)

# Write the generated contract to a text file
write_contract_to_file(contract_text, output_file_path)

# Print confirmation
print(f"Contract successfully written to {output_file_path}")

